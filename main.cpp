#include <QCoreApplication>
#include <QDebug>
#include <QtCore>
#include "QtTelegramBot/qttelegrambot.h"
#include "completion.h"
#include "image.h"
#include "msql.h"
#include <QStringList>
#include <QList>
#include<QDate>
#include<cstring>
#define TOKEN "token"
DB dbase;
Telegram::Bot *bot;
int date = QDate::currentDate().day();
QStringList l;



void newMessage(Telegram::Message message)
{

    if (date !=QDate::currentDate().day()) {
        dbase.resetRq();
    }




    try {



        if (bot && message.string==("/start")) {
            bot->sendMessage(QString::number(message.chat.id), "\nü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ \n\n"
                                              "üìù –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å  \n\n"
                                              "–ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –∫–æ—Ä–µ–∫—Ç–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.");


            dbase.insert(&message.chat.id,&message.chat.username);
        } else if (message.string.contains("/start ") && !dbase.chekAv(&message.chat.id)) {
            bot->sendMessage(QString::number(message.chat.id), "\nü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ \n\n"
                                              "üìù –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å  \n\n"
                                              "–ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –∫–æ—Ä–µ–∫—Ç–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.");


                dbase.insert(&message.chat.id,&message.chat.username);
                QString *d=new QString;
                *d = message.string.split(" ")[1];
                dbase.addLimReq(d);

                qlonglong *idll = new qlonglong;
                        *idll=d->toLongLong();
                if (dbase.chekStat(idll)!=2 || dbase.chekStat(idll)!=4) {

                 bot->sendMessage(*d,"üë• –ö—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –ø–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n\n–í–∞—à–µ —á–∏—Å–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ –Ω–∞ 5\n –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–∏–ª–µ–Ω–∏–π:\n/notoff");
                }
                delete d;
                delete idll;

        }



        if (dbase.chekAv(&message.chat.id)) { //–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–¥

            if (dbase.numOfReq(&message.chat.id)>0) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

                if (bot && message.string=="/notoff") {
                    bot->sendMessage(QString::number(message.chat.id),"üîï–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–æ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n/noton");
                    dbase.uvedSwap(&message.chat.id,1);
                }

                if (bot && message.string=="/noton") {
                    bot->sendMessage(QString::number(message.chat.id),"üîî–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≥–ª–æ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤–∫–ª—é—á–µ–Ω—ã\n\n–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n/notoff");
                    dbase.uvedSwap(&message.chat.id,2);
                }



                if (bot && message.type == Telegram::Message::TextType && !message.string.contains("/account")
                        && !message.string.contains("/help") && !message.string.contains("/start")&& !message.string.contains("/noton")&& !message.string.contains("/notoff") && !message.string.contains("/image")
                        && !message.string.contains("/chatgpt") && dbase.chekStat(&message.chat.id)!=0 && !message.string.contains("sudo")&& !message.string.contains("/context")) {

                    qDebug()<< message.chat.id << message.chat.username << ": " << message.string<< '\n';

                    if (dbase.checkNeiro(&message.chat.id)==1) {
                       if (dbase.isContext(&message.chat.id)) {
                            QString *tempmsg = new QString;
                            *tempmsg = getText(dbase.checkCOntext(&message.chat.id) + "–Ø:"+message.string+"");
                           bot->sendMessage(QString::number(message.chat.id),*tempmsg );

                            dbase.addcontext(&message.chat.id,&message.string,tempmsg);

                            delete tempmsg;

                       } else bot->sendMessage(QString::number(message.chat.id), getText(message.string));


                    } else if (dbase.checkNeiro(&message.chat.id)==2) bot->sendPhoto(QString::number(message.chat.id),getImage(message.string));

                    else bot->sendMessage(QString::number(message.chat.id), "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –≤ –≤ –º–µ–Ω—é!");

                    if (dbase.chekStat(&message.chat.id)!=3) {
                        dbase.reqDecriment(&message.chat.id);
                    }
                }


                if (bot && message.string=="/chatgpt" && dbase.chekStat(&message.chat.id)!=0) {  //–≤—ã–±—Ä–∞—Ç—å chatGPT
                    dbase.changeNeiro(&message.chat.id, "chat");
                    bot->sendMessage(QString::number(message.chat.id),"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chatGPT üí¨");
                }


                if (bot && message.string=="/image" && dbase.chekStat(&message.chat.id)!=0) {  //–≤—ã–±—Ä–∞—Ç—å dall-e
                    dbase.changeNeiro(&message.chat.id,"dalle");
                    bot->sendMessage(QString::number(message.chat.id),"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DALL-E üåÑ");
                }

                if (bot && message.string=="/context") {
                    if (dbase.isContext(&message.chat.id)) {
                        dbase.changeCont(&message.chat.id,0);
                        dbase.clearContext(&message.chat.id);
                        bot->sendMessage(QString::number(message.chat.id),"–£—á–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω");
                    } else {

                            dbase.changeCont(&message.chat.id,1);
                            bot->sendMessage(QString::number(message.chat.id),"–£—á–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∫–ª—é—á–µ–Ω");

                    }
                }



                if (bot && message.string=="/account" && dbase.chekStat(&message.chat.id)!=0) { //–∏–Ω—Ñ–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    bot->sendMessage(QString::number(message.chat.id),"\nüë§ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å "+QString::number(dbase.numOfReq(&message.chat.id))+" –∑–∞–ø—Ä–æ—Å–æ–≤"
                                     ". \n–ó–∞–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
                                     "üéö –í–∞—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: "+QString::number(dbase.getLimReq(&message.chat.id))+"\n\n"
                                     "üë• –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π(–ø–ª—é—Å 5 –∑–∞ –∫–∞–∂–¥–æ–≥–æ) –ø–æ —Å–≤–æ–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\nhttps://t.me/OpenAISucharTgGBot?start="+QString::number(message.chat.id));
                }



                if (bot && message.string=="/help" && dbase.chekStat(&message.chat.id)!=0) {//help
                    bot->sendMessage(QString::number(message.chat.id), "\nü§ñ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ \n\n"
                                                      "üìù –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å\n\n"
                                                      "‚ùï –ü–æ–º–Ω–∏—Ç–µ, —á–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –±—É–¥–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Ç–µ–º –∫–æ—Ä–µ–∫—Ç–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.\n\n"
                                                      "‚åö Ô∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –Ω–æ –æ–Ω–æ –≤–æ—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–∞–¥—ã–π –¥–µ–Ω—å.\n\n"
                                                      "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —á–∏—Å–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ:\n"
                                                      "/account\n\n"
                                                      "üë• –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –≤–∞—à–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n""https://t.me/OpenAISucharTgGBot?start="+QString::number(message.chat.id));
                }



                //admin
                if (bot && message.string.contains("sudo") && dbase.chekStat(&message.chat.id)==3) {
                    //select
                    if (bot && message.string.contains("select")){
                        bot->sendMessage(QString::number(message.chat.id),dbase.usersinfo());
                    }
                    //send
                    if (bot && message.string.contains("send")){
                        l=message.string.split("  ");
                        bot->sendMessage(l[2],l[3]);
                    }





                }




            } else {
                bot->sendMessage(QString::number(message.chat.id),"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –¥–µ–Ω—å!");
                qDebug()<< message.chat.id << message.chat.username << ": " << message.string<<"(–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã)" <<'\n';
            }



        } else bot->sendMessage(QString::number(message.chat.id),"–í–≤–µ–¥–∏—Ç–µ /start");


    } catch(...) {
         bot->sendMessage(QString::number(message.chat.id), "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä—Ä–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
    }

}

int main(int argc, char *argv[])
{


    QCoreApplication a(argc, argv);

    bot = new Telegram::Bot(TOKEN, true, 500, 4);
    QObject::connect(bot, &Telegram::Bot::message, &newMessage);
    qDebug() << "Started Telegram Bot";

    return a.exec();
}
